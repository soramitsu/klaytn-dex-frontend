/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface Multicall extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Multicall;
  clone(): Multicall;
  methods: {
    aggregate(
      calls: [string, string | number[]][]
    ): NonPayableTransactionObject<{
      blockNumber: string;
      returnData: string[];
      0: string;
      1: string[];
    }>;

    blockAndAggregate(
      calls: [string, string | number[]][]
    ): NonPayableTransactionObject<{
      blockNumber: string;
      blockHash: string;
      returnData: [boolean, string][];
      0: string;
      1: string;
      2: [boolean, string][];
    }>;

    getBlockHash(
      blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    getBlockNumber(): NonPayableTransactionObject<string>;

    getCurrentBlockCoinbase(): NonPayableTransactionObject<string>;

    getCurrentBlockDifficulty(): NonPayableTransactionObject<string>;

    getCurrentBlockGasLimit(): NonPayableTransactionObject<string>;

    getCurrentBlockTimestamp(): NonPayableTransactionObject<string>;

    getEthBalance(addr: string): NonPayableTransactionObject<string>;

    getLastBlockHash(): NonPayableTransactionObject<string>;

    tryAggregate(
      requireSuccess: boolean,
      calls: [string, string | number[]][]
    ): NonPayableTransactionObject<[boolean, string][]>;

    tryBlockAndAggregate(
      requireSuccess: boolean,
      calls: [string, string | number[]][]
    ): NonPayableTransactionObject<{
      blockNumber: string;
      blockHash: string;
      returnData: [boolean, string][];
      0: string;
      1: string;
      2: [boolean, string][];
    }>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
