/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposit = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;
export type EmergencyWithdraw = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;
export type NewPoolLimit = ContractEventLog<{
  poolLimitPerUser: string;
  0: string;
}>;
export type NewRewardPerBlock = ContractEventLog<{
  rewardPerBlock: string;
  0: string;
}>;
export type NewStartAndEndBlocks = ContractEventLog<{
  startBlock: string;
  endBlock: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RewardsStop = ContractEventLog<{
  blockNumber: string;
  0: string;
}>;
export type TokenRecovery = ContractEventLog<{
  token: string;
  amount: string;
  0: string;
  1: string;
}>;
export type Withdraw = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;

export interface StakingInitializable extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): StakingInitializable;
  clone(): StakingInitializable;
  methods: {
    PRECISION_FACTOR(): NonPayableTransactionObject<string>;

    STAKING_FACTORY(): NonPayableTransactionObject<string>;

    deposit(_amount: number | string | BN): NonPayableTransactionObject<void>;

    emergencyRewardWithdraw(
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    emergencyWithdraw(): NonPayableTransactionObject<void>;

    hasUserLimit(): NonPayableTransactionObject<boolean>;

    initialize(
      _stakedToken: string,
      _rewardToken: string,
      _rewardPerBlock: number | string | BN,
      _startBlock: number | string | BN,
      _rewardEndBlock: number | string | BN,
      _poolLimitPerUser: number | string | BN,
      _numberBlocksForUserLimit: number | string | BN,
      _multisig: string
    ): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    pendingReward(_user: string): NonPayableTransactionObject<string>;

    pool(): NonPayableTransactionObject<{
      isInitialized: boolean;
      stakedToken: string;
      userLimit: boolean;
      rewardToken: string;
      startBlock: string;
      rewardEndBlock: string;
      lastRewardBlock: string;
      numberBlocksForUserLimit: string;
      poolLimitPerUser: string;
      accTokenPerShare: string;
      rewardPerBlock: string;
      totalStaked: string;
      0: boolean;
      1: string;
      2: boolean;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: string;
      10: string;
      11: string;
    }>;

    recoverToken(_token: string): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    stopReward(): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    updatePoolLimitPerUser(
      _userLimit: boolean,
      _poolLimitPerUser: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateRewardPerBlock(
      _rewardPerBlock: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateStartAndEndBlocks(
      _startBlock: number | string | BN,
      _rewardEndBlock: number | string | BN
    ): NonPayableTransactionObject<void>;

    userInfo(arg0: string): NonPayableTransactionObject<{
      amount: string;
      rewardDebt: string;
      0: string;
      1: string;
    }>;

    withdraw(_amount: number | string | BN): NonPayableTransactionObject<void>;
  };
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    EmergencyWithdraw(cb?: Callback<EmergencyWithdraw>): EventEmitter;
    EmergencyWithdraw(
      options?: EventOptions,
      cb?: Callback<EmergencyWithdraw>
    ): EventEmitter;

    NewPoolLimit(cb?: Callback<NewPoolLimit>): EventEmitter;
    NewPoolLimit(
      options?: EventOptions,
      cb?: Callback<NewPoolLimit>
    ): EventEmitter;

    NewRewardPerBlock(cb?: Callback<NewRewardPerBlock>): EventEmitter;
    NewRewardPerBlock(
      options?: EventOptions,
      cb?: Callback<NewRewardPerBlock>
    ): EventEmitter;

    NewStartAndEndBlocks(cb?: Callback<NewStartAndEndBlocks>): EventEmitter;
    NewStartAndEndBlocks(
      options?: EventOptions,
      cb?: Callback<NewStartAndEndBlocks>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RewardsStop(cb?: Callback<RewardsStop>): EventEmitter;
    RewardsStop(
      options?: EventOptions,
      cb?: Callback<RewardsStop>
    ): EventEmitter;

    TokenRecovery(cb?: Callback<TokenRecovery>): EventEmitter;
    TokenRecovery(
      options?: EventOptions,
      cb?: Callback<TokenRecovery>
    ): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "EmergencyWithdraw", cb: Callback<EmergencyWithdraw>): void;
  once(
    event: "EmergencyWithdraw",
    options: EventOptions,
    cb: Callback<EmergencyWithdraw>
  ): void;

  once(event: "NewPoolLimit", cb: Callback<NewPoolLimit>): void;
  once(
    event: "NewPoolLimit",
    options: EventOptions,
    cb: Callback<NewPoolLimit>
  ): void;

  once(event: "NewRewardPerBlock", cb: Callback<NewRewardPerBlock>): void;
  once(
    event: "NewRewardPerBlock",
    options: EventOptions,
    cb: Callback<NewRewardPerBlock>
  ): void;

  once(event: "NewStartAndEndBlocks", cb: Callback<NewStartAndEndBlocks>): void;
  once(
    event: "NewStartAndEndBlocks",
    options: EventOptions,
    cb: Callback<NewStartAndEndBlocks>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "RewardsStop", cb: Callback<RewardsStop>): void;
  once(
    event: "RewardsStop",
    options: EventOptions,
    cb: Callback<RewardsStop>
  ): void;

  once(event: "TokenRecovery", cb: Callback<TokenRecovery>): void;
  once(
    event: "TokenRecovery",
    options: EventOptions,
    cb: Callback<TokenRecovery>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
