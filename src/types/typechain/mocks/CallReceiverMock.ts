/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type MockFunctionCalled = ContractEventLog<{}>;
export type MockFunctionCalledWithArgs = ContractEventLog<{
  a: string;
  b: string;
  0: string;
  1: string;
}>;

export interface CallReceiverMock extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): CallReceiverMock;
  clone(): CallReceiverMock;
  methods: {
    mockFunction(): PayableTransactionObject<string>;

    mockFunctionNonPayable(): NonPayableTransactionObject<string>;

    mockFunctionOutOfGas(): PayableTransactionObject<void>;

    mockFunctionRevertsNoReason(): PayableTransactionObject<void>;

    mockFunctionRevertsReason(): PayableTransactionObject<void>;

    mockFunctionThrows(): PayableTransactionObject<void>;

    mockFunctionWithArgs(
      a: number | string | BN,
      b: number | string | BN
    ): PayableTransactionObject<string>;

    mockFunctionWritesStorage(): NonPayableTransactionObject<string>;

    mockStaticFunction(): NonPayableTransactionObject<string>;

    sharedAnswer(): NonPayableTransactionObject<string>;
  };
  events: {
    MockFunctionCalled(cb?: Callback<MockFunctionCalled>): EventEmitter;
    MockFunctionCalled(
      options?: EventOptions,
      cb?: Callback<MockFunctionCalled>
    ): EventEmitter;

    MockFunctionCalledWithArgs(
      cb?: Callback<MockFunctionCalledWithArgs>
    ): EventEmitter;
    MockFunctionCalledWithArgs(
      options?: EventOptions,
      cb?: Callback<MockFunctionCalledWithArgs>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "MockFunctionCalled", cb: Callback<MockFunctionCalled>): void;
  once(
    event: "MockFunctionCalled",
    options: EventOptions,
    cb: Callback<MockFunctionCalled>
  ): void;

  once(
    event: "MockFunctionCalledWithArgs",
    cb: Callback<MockFunctionCalledWithArgs>
  ): void;
  once(
    event: "MockFunctionCalledWithArgs",
    options: EventOptions,
    cb: Callback<MockFunctionCalledWithArgs>
  ): void;
}
