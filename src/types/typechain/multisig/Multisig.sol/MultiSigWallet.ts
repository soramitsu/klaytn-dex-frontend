/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Confirmation = ContractEventLog<{
  sender: string;
  transactionId: string;
  0: string;
  1: string;
}>;
export type Deposit = ContractEventLog<{
  sender: string;
  value: string;
  0: string;
  1: string;
}>;
export type Execution = ContractEventLog<{
  transactionId: string;
  0: string;
}>;
export type ExecutionFailure = ContractEventLog<{
  transactionId: string;
  0: string;
}>;
export type OwnerAddition = ContractEventLog<{
  owner: string;
  0: string;
}>;
export type OwnerRemoval = ContractEventLog<{
  owner: string;
  0: string;
}>;
export type RequirementChange = ContractEventLog<{
  required: string;
  0: string;
}>;
export type Revocation = ContractEventLog<{
  sender: string;
  transactionId: string;
  0: string;
  1: string;
}>;
export type Submission = ContractEventLog<{
  transactionId: string;
  0: string;
}>;

export interface MultiSigWallet extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MultiSigWallet;
  clone(): MultiSigWallet;
  methods: {
    MAX_OWNER_COUNT(): NonPayableTransactionObject<string>;

    addOwner(owner: string): NonPayableTransactionObject<void>;

    changeRequirement(
      _required: number | string | BN
    ): NonPayableTransactionObject<void>;

    confirmTransaction(
      transactionId: number | string | BN
    ): NonPayableTransactionObject<void>;

    executeTransaction(
      transactionId: number | string | BN
    ): NonPayableTransactionObject<void>;

    getConfirmations(
      transactionId: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    getOwners(): NonPayableTransactionObject<string[]>;

    getTransactionCount(
      pending: boolean,
      executed: boolean
    ): NonPayableTransactionObject<string>;

    getTransactionIds(
      from: number | string | BN,
      to: number | string | BN,
      pending: boolean,
      executed: boolean
    ): NonPayableTransactionObject<string[]>;

    getTransactionInfo(
      transactionId: number | string | BN
    ): NonPayableTransactionObject<{
      destination_: string;
      value_: string;
      data_: string;
      executed_: boolean;
      votesLength_: string;
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: string;
    }>;

    isConfirmed(
      transactionId: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    removeOwner(owner: string): NonPayableTransactionObject<void>;

    replaceOwner(
      owner: string,
      newOwner: string
    ): NonPayableTransactionObject<void>;

    required(): NonPayableTransactionObject<string>;

    revokeConfirmation(
      transactionId: number | string | BN
    ): NonPayableTransactionObject<void>;

    submitTransaction(
      destination: string,
      value: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<string>;

    transactionCount(): NonPayableTransactionObject<string>;
  };
  events: {
    Confirmation(cb?: Callback<Confirmation>): EventEmitter;
    Confirmation(
      options?: EventOptions,
      cb?: Callback<Confirmation>
    ): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    Execution(cb?: Callback<Execution>): EventEmitter;
    Execution(options?: EventOptions, cb?: Callback<Execution>): EventEmitter;

    ExecutionFailure(cb?: Callback<ExecutionFailure>): EventEmitter;
    ExecutionFailure(
      options?: EventOptions,
      cb?: Callback<ExecutionFailure>
    ): EventEmitter;

    OwnerAddition(cb?: Callback<OwnerAddition>): EventEmitter;
    OwnerAddition(
      options?: EventOptions,
      cb?: Callback<OwnerAddition>
    ): EventEmitter;

    OwnerRemoval(cb?: Callback<OwnerRemoval>): EventEmitter;
    OwnerRemoval(
      options?: EventOptions,
      cb?: Callback<OwnerRemoval>
    ): EventEmitter;

    RequirementChange(cb?: Callback<RequirementChange>): EventEmitter;
    RequirementChange(
      options?: EventOptions,
      cb?: Callback<RequirementChange>
    ): EventEmitter;

    Revocation(cb?: Callback<Revocation>): EventEmitter;
    Revocation(options?: EventOptions, cb?: Callback<Revocation>): EventEmitter;

    Submission(cb?: Callback<Submission>): EventEmitter;
    Submission(options?: EventOptions, cb?: Callback<Submission>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Confirmation", cb: Callback<Confirmation>): void;
  once(
    event: "Confirmation",
    options: EventOptions,
    cb: Callback<Confirmation>
  ): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "Execution", cb: Callback<Execution>): void;
  once(
    event: "Execution",
    options: EventOptions,
    cb: Callback<Execution>
  ): void;

  once(event: "ExecutionFailure", cb: Callback<ExecutionFailure>): void;
  once(
    event: "ExecutionFailure",
    options: EventOptions,
    cb: Callback<ExecutionFailure>
  ): void;

  once(event: "OwnerAddition", cb: Callback<OwnerAddition>): void;
  once(
    event: "OwnerAddition",
    options: EventOptions,
    cb: Callback<OwnerAddition>
  ): void;

  once(event: "OwnerRemoval", cb: Callback<OwnerRemoval>): void;
  once(
    event: "OwnerRemoval",
    options: EventOptions,
    cb: Callback<OwnerRemoval>
  ): void;

  once(event: "RequirementChange", cb: Callback<RequirementChange>): void;
  once(
    event: "RequirementChange",
    options: EventOptions,
    cb: Callback<RequirementChange>
  ): void;

  once(event: "Revocation", cb: Callback<Revocation>): void;
  once(
    event: "Revocation",
    options: EventOptions,
    cb: Callback<Revocation>
  ): void;

  once(event: "Submission", cb: Callback<Submission>): void;
  once(
    event: "Submission",
    options: EventOptions,
    cb: Callback<Submission>
  ): void;
}
